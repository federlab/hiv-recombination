import numpy as np

#Load the modules we will need for the jobs
# shell.prefix()
shell.prefix("module load pcre2/10.39;\nmodule load R/4.1.2;\nmodule load SLiM/3.7;")



#This file runs Alison's scripts for slim simulations

#Directory where the simulations will take place
wrap_dir = '/net/feder/vol1/project/hiv_recombination/data/simulated/'
out_dir = '/net/feder/vol1/home/evromero/2021_hiv-rec/data/slimDatasets/'
r_script_dir = '/net/feder/vol1/home/evromero/2021_hiv-rec/bin/rule_scripts_simulation/'

# #For Desktop Dry run
# wrap_dir = '/Volumes/feder-vol1/project/hiv_recombination/data/simulated/'
# out_dir = '/Volumes/feder-vol1/home/evromero/2021_hiv-rec/data/slimDatasets/'
# r_script_dir = '/Volumes/feder-vol1/home/evromero/2021_hiv-rec/bin/rule_scripts_simulation/'

#The constants we will use for each run
DIR_NAME = '2022_09_16_neutral_long'
MU = 1e-6
NE = 1e4
SAMP_DEPTH = 800 

#get the values for each of the simulation options
rho_vals = ['0.001', '1e-04','2e-04' ,'1e-05', '2e-05', '2e-06' ]
reps = range(2)
sel_opts = ['neutral']
timepoint_nums = range(1, 6)

#the patterns for the genotype and loci dataframes
full_dir_pattern_gen= out_dir + DIR_NAME + "/mu1e-06_rho{rho_val}_Ne10000_M800_s{sel_opt}_rep{rep}/analysis/FilteredGenotypes"
full_dir_pattern_gen = expand(full_dir_pattern_gen,
        rho_val = rho_vals, sel_opt = sel_opts, rep = reps, curr_time = timepoint_nums)

full_dir_pattern_loc= out_dir + DIR_NAME + "/mu1e-06_rho{rho_val}_Ne10000_M800_s{sel_opt}_rep{rep}/analysis/FilteredLoci"
full_dir_pattern_loc = expand(full_dir_pattern_loc,
        rho_val = rho_vals, sel_opt = sel_opts, rep = reps, curr_time = timepoint_nums)


#Targets are outputs and dependencies are inputs
rule all:
    input:
     full_dir_pattern_gen,
     full_dir_pattern_loc

#This rule creates the directories and slim scripts for each simulation
rule set_up_dirs:
    output: 
     wrap_dir + DIR_NAME + "/mu1e-06_rho{rho_val}_Ne10000_M800_s{sel_opt}_rep{rep}/slim_script.txt"
    shell: "Rscript " + r_script_dir + "setup_dir_and_script.r -d " + \
             DIR_NAME + " -m " + str(MU) + " -r {wildcards.rho_val} -N " + str(NE) + " -M " + str(SAMP_DEPTH) + " -i {wildcards.rep} -s {wildcards.sel_opt}"

#This rule runs the slim script for each simulation
rule run_slim:
    input:
     wrap_dir + DIR_NAME + "/mu1e-06_rho{rho_val}_Ne10000_M800_s{sel_opt}_rep{rep}/slim_script.txt"

    output:
     wrap_dir + DIR_NAME + "/mu1e-06_rho{rho_val}_Ne10000_M800_s{sel_opt}_rep{rep}/slim_output.txt"
    
    shell: "slim " + wrap_dir + DIR_NAME + "/mu1e-06_rho{wildcards.rho_val}_Ne10000_M800_s{wildcards.sel_opt}_rep{wildcards.rep}/slim_script.txt > " + \
            wrap_dir + DIR_NAME + "/mu1e-06_rho{wildcards.rho_val}_Ne10000_M800_s{wildcards.sel_opt}_rep{wildcards.rep}/slim_output.txt"

#This rule parses and makes dataframes of the slim output
rule format_slim_output:
    input: 
     wrap_dir + DIR_NAME + "/mu1e-06_rho{rho_val}_Ne10000_M800_s{sel_opt}_rep{rep}/slim_output.txt"
    
    output:
     out_dir + DIR_NAME + "/mu1e-06_rho{rho_val}_Ne10000_M800_s{sel_opt}_rep{rep}/analysis/FilteredGenotypes",
     out_dir + DIR_NAME + "/mu1e-06_rho{rho_val}_Ne10000_M800_s{sel_opt}_rep{rep}/analysis/FilteredLoci"
    
    script:
        r_script_dir + "format_slim_output.py"
     